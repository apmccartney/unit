#ifndef UNIT_MAKE_HPP
#define UNIT_MAKE_HPP

#include "unit.hpp"

namespace unit {

template< typename EnumType, typename QuantityType >
QuantityType
make_( const double magnitude, const std::string& unitSymbol, const QuantityType& ){
  const auto entryIterator =
    unit::conversionFactor< EnumType, QuantityType >::map.find( unitSymbol );
  if ( entryIterator == unit::conversionFactor< EnumType, QuantityType >::map.end() ){
    LOG(ERROR) << "Argument unitSymbol string does not correspond to a recognized "
               << quantityName< EnumType > << " unit";
    LOG(INFO) << "Argument unitSymbol string: " << unitSymbol;
    LOG(INFO) << "Error in unit::"
              << quantityName< EnumType > <<"::make function";
    throw std::invalid_argument
      ( "unitSymbol argument does not correspond to a recognized unit" );
  }
  return magnitude * entryIterator->second;
}

}

#endif
