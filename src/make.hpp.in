#ifndef UNIT_MAKE_HPP
#define UNIT_MAKE_HPP

#include "unit.hpp"

namespace unit {

template< typename Quantity >
typename InPreferred< Quantity >::Unit
make( const double magnitude, const std::string& unitSymbol ){
  const auto entryIterator =
    unit::conversionFactorMap< Quantity >.find( unitSymbol );
  if ( entryIterator == unit::conversionFactorMap< Quantity >.end() ){
    LOG(ERROR) << "Argument unitSymbol string does not correspond to a unit";
    LOG(INFO) << "Argument unitSymbol string: " << unitSymbol;
    LOG(INFO) << "Error in unit::make function";
    throw std::invalid_argument
      ( "unitSymbol argument does not correspond to a recognized unit" );
  }
  return magnitude * entryIterator->second;
}

}

#endif
