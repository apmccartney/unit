#ifndef UNIT_FUNCTIONS_HPP
#define UNIT_FUNCTIONS_HPP

#include "unit/length.hpp"
#include "unit/area.hpp"
#include "unit/volume.hpp"
#include "unit/time.hpp"
#include "unit/velocity.hpp"

namespace unit {

/* functions */
template< typename Quantity >
typename InPreferred< Quantity >::Unit
make( const double magnitude, const std::string& unitSymbol );

}

#include "unit/src/make.hpp"

#define DEFINE_QUANTITY_FUNCTIONS( quantity )\
namespace unit {\
namespace quantity {\
\
/** @brief Make a quantity::Value given a magnitude and unit string value */\
const auto make = ::unit::make< Unit >;\
\
inline Value read( std::istream& is ){\
  const auto pos = is.tellg();\
  try {\
    double magnitude;\
    std::string symbol;\
    is >> magnitude >> symbol;\
    if ( is.fail() ) {\
      LOG(ERROR) << "Could not read from stream";       \
      throw std::exception();\
    }\
    return make( magnitude, symbol );\
  } catch ( std::exception& e ) {\
    LOG(INFO) << "Error while reading " #quantity " value from stream";\
    is.clear();\
    is.seekg( pos );\
    is.clear( std::ios_base::failbit );\
    throw e;\
  }\
}\
\
}\
}\

DEFINE_QUANTITY_FUNCTIONS( length )
DEFINE_QUANTITY_FUNCTIONS( area )
DEFINE_QUANTITY_FUNCTIONS( volume )
DEFINE_QUANTITY_FUNCTIONS( time )
DEFINE_QUANTITY_FUNCTIONS( velocity )

#undef DEFINE_QUANTITY_FUNCTIONS

#endif
