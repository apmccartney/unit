#ifndef UNIT_FUNCTIONS_HPP
#define UNIT_FUNCTIONS_HPP

#include "unit/length.hpp"
#include "unit/area.hpp"
#include "unit/volume.hpp"
#include "unit/time.hpp"
#include "unit/velocity.hpp"

namespace unit {

/* functions */
template< typename EnumType, typename QuantityType >
QuantityType
make_( const double magnitude,
       const std::string& unitSymbol,
       const QuantityType& );

template< typename EnumType, typename QuantityType >
void
read_( std::istream& is, QuantityType& sink );

}

#include "unit/src/make.hpp"
#include "unit/src/read.hpp"

#define DEFINE_QUANTITY_FUNCTIONS( quantity )\
namespace unit {\
namespace quantity {\
\
/** @brief Make a quantity::Value given a magnitude and unit string value */\
template< typename QuantityType > \
inline QuantityType \
make( const double magnitude, \
      const std::string& unitSymbol, \
      const QuantityType& overloadSwitch ){ \
  return ::unit::make_< quantity::Unit >( magnitude, unitSymbol, overloadSwitch ); \
}\
\
template< typename QuantityType > \
inline void \
read( std::istream& is, QuantityType& sink ){ \
  return ::unit::read_< quantity::Unit >( is, sink ); \
}\
\
}\
}\

DEFINE_QUANTITY_FUNCTIONS( length )
DEFINE_QUANTITY_FUNCTIONS( area )
DEFINE_QUANTITY_FUNCTIONS( volume )
DEFINE_QUANTITY_FUNCTIONS( time )
DEFINE_QUANTITY_FUNCTIONS( velocity )

#undef DEFINE_QUANTITY_FUNCTIONS

#include "unit/length/src/operator>>.hpp"
#include "unit/area/src/operator>>.hpp"
#include "unit/volume/src/operator>>.hpp"
#include "unit/time/src/operator>>.hpp"
#include "unit/velocity/src/operator>>.hpp"

#endif
