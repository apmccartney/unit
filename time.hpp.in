#ifndef UNIT_TIME_HPP
#define UNIT_TIME_HPP

#include "boost/units/conversion.hpp"
#include "boost/units/physical_dimensions/time.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace time {

enum class Unit {
  second,
  nanosecond,
  microsecond,
  millisecond,
  minute = 1101,
  hour   = 1102,
  day    = 1103,
  year   = 1104,
};

template< Unit time >
const std::string name;

/** 
 * @brief 
 * A macro defining a constant string describing the name a argument unit 
 */
#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

DEFINE_NAME( nanosecond, nanosecond )
DEFINE_NAME( microsecond, microsecond )
DEFINE_NAME( millisecond, millisecond )
DEFINE_NAME( second, second )
DEFINE_NAME( minute, minute )
DEFINE_NAME( hour, hour )
DEFINE_NAME( day, day )
DEFINE_NAME( year, year )

#undef DEFINE_NAME

template< Unit time >
const std::string symbol;

/** 
 * @brief 
 * A macro defining a constant string describing the symbol a argument unit 
 */
#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

DEFINE_SYMBOL( nanosecond, ns)
DEFINE_SYMBOL( microsecond, us )
DEFINE_SYMBOL( millisecond, ms )
DEFINE_SYMBOL( second, s )
DEFINE_SYMBOL( minute, min )
DEFINE_SYMBOL( hour, hour )
DEFINE_SYMBOL( day, d )
DEFINE_SYMBOL( year, y )

#undef DEFINE_SYMBOL

template< Unit timeUnit >
struct base : public boost::units::base_unit
< base< timeUnit >,
  boost::units::time_dimension, static_cast< long >( timeUnit ) > {
  static const std::string& name(){ return unit::time::name< timeUnit >; }
  static const std::string& symbol(){ return unit::time::symbol< timeUnit >; }
};

} // namespace time

/** @{
 *  @name Time unit types (used as Unit parameters in the Quantity template)
 */
using Second =
  boost::units::unit< boost::units::time_dimension, unit::System >;

using Minute = time::base< time::Unit::minute >::unit_type;
using Hour   = time::base< time::Unit::hour >::unit_type;
using Day    = time::base< time::Unit::day >::unit_type;
using Year   = time::base< time::Unit::year >::unit_type;

/** @brief A macro creating a typedef corresponding to a scaled second struct */
#define DEFINE_SCALED_SECOND( Prefix )    \
using Prefix## second = boost::units::make_scaled_unit \
                        < unit::Second, unit::scale::Prefix >::type;

DEFINE_SCALED_SECOND( Milli )
DEFINE_SCALED_SECOND( Micro )
DEFINE_SCALED_SECOND( Nano )

#undef DEFINE_SCALED_METER
/** @}
 */

namespace time {
/** @{
 *  @name Time unit constants used in construction of time quantity
 */
BOOST_UNITS_STATIC_CONSTANT( s, unit::Second );
BOOST_UNITS_STATIC_CONSTANT( min, unit::Minute );
BOOST_UNITS_STATIC_CONSTANT( hour, unit::Hour );
BOOST_UNITS_STATIC_CONSTANT( d, unit::Day );
BOOST_UNITS_STATIC_CONSTANT( y, unit::Year );
BOOST_UNITS_STATIC_CONSTANT( ms, unit::Millisecond );
BOOST_UNITS_STATIC_CONSTANT( us, unit::Microsecond );
BOOST_UNITS_STATIC_CONSTANT( ns, unit::Nanosecond );
/** @}
 */

}

#define DEFINE_CONSTANT( name, Unit )\
const Quantity< Unit > name( 1.0 * time::name ); \
 \
template<>\
const Quantity< Unit > identity< Quantity< Unit > > = name;   \

DEFINE_CONSTANT(s, Second)
DEFINE_CONSTANT(ms, Millisecond)
DEFINE_CONSTANT(us, Microsecond)
DEFINE_CONSTANT(ns, Nanosecond)
DEFINE_CONSTANT(min, Minute)
DEFINE_CONSTANT(hour, Hour)
DEFINE_CONSTANT(d, Day)
DEFINE_CONSTANT(y, Year)

#undef DEFINE_CONSTANT

template< typename QuantityType >
struct conversionFactor< time::Unit, QuantityType >{
  static const std::unordered_map< std::string, QuantityType > map;
};

template< typename QuantityType >
const std::unordered_map< std::string, QuantityType >
conversionFactor< time::Unit, QuantityType >::map =
{ { "s", QuantityType( 1.0 * time::s ) },
  { "ms", QuantityType( 1.0 * time::ms ) },
  { "us", QuantityType( 1.0 * time::us ) },
  { "ns", QuantityType( 1.0 * time::ns ) },
  { "min", QuantityType( 1.0 * time::min ) },
  { "hour", QuantityType( 1.0 * time::hour ) },
  { "d", QuantityType( 1.0 * time::d ) },
  { "y", QuantityType( 1.0 * time::y ) } };


template<>
const std::string quantityName< time::Unit > = "time";

}

#define DEFINE_S_CONVERSION( timeUnit, factor ) \
  BOOST_UNITS_DEFINE_CONVERSION_FACTOR( \
    ::unit::time::base< ::unit::time::Unit::timeUnit >, ::unit::Second, \
    double, factor ); \
  BOOST_UNITS_DEFAULT_CONVERSION( \
    ::unit::time::base< ::unit::time::Unit::timeUnit >, ::unit::Second );

DEFINE_S_CONVERSION( minute, ::unit::scale::secondsPerMinute )
DEFINE_S_CONVERSION( hour,   ::unit::scale::secondsPerMinute \
                             * ::unit::scale::minutesPerHour )
DEFINE_S_CONVERSION( day,    ::unit::scale::secondsPerMinute \
                             * ::unit::scale::minutesPerHour \
                             * ::unit::scale::hoursPerDay )
DEFINE_S_CONVERSION( year,   ::unit::scale::secondsPerMinute \
                             * ::unit::scale::minutesPerHour \
                             * ::unit::scale::hoursPerDay \
                             * ::unit::scale::daysPerYear )

#undef DEFINE_S_CONVERSION

#include "unit/src/functions.hpp"

#endif
