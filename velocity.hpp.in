#ifndef UNIT_VELOCITY_HPP
#define UNIT_VELOCITY_HPP

#include "boost/units/physical_dimensions/velocity.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace velocity {

enum class Unit {
  meterPerSecond,
  centimeterPerSecond = 1151,
  kilometerPerHour = 1152
};

template< Unit velocity >
const std::string name;

#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

DEFINE_NAME( meterPerSecond, meter per second )
DEFINE_NAME( centimeterPerSecond, centimeter per second )
DEFINE_NAME( kilometerPerHour, kilometer per hour )

#undef DEFINE_NAME

template< Unit velocity >
const std::string symbol;

#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

DEFINE_SYMBOL( meterPerSecond, m/s )
DEFINE_SYMBOL( centimeterPerSecond, cm/s )
DEFINE_SYMBOL( kilometerPerHour, km/hour )

#undef DEFINE_SYMBOL

template< Unit velocityUnit >
struct base : public boost::units::base_unit
< base< velocityUnit >,
  boost::units::velocity_dimension, static_cast< long >( velocityUnit ) > {

  static const std::string& name(){
    return unit::velocity::name< velocityUnit >;
  }

  static const std::string& symbol(){
    return unit::velocity::symbol< velocityUnit >;
  }
};

using MeterPerSecond =
  boost::units::unit< boost::units::velocity_dimension, unit::System >;

using CentimeterPerSecond= base< Unit::centimeterPerSecond >::unit_type;
using KilometerPerHour = base< Unit::kilometerPerHour >::unit_type;

BOOST_UNITS_STATIC_CONSTANT( m_per_s, unit::velocity::MeterPerSecond );
BOOST_UNITS_STATIC_CONSTANT( cm_per_s, unit::velocity::CentimeterPerSecond );
BOOST_UNITS_STATIC_CONSTANT( km_per_hour, unit::velocity::KilometerPerHour );

using Value = unit::Quantity< unit::velocity::MeterPerSecond >;

}

/* template constant specialization */
template< >
struct InPreferred< velocity::Unit > {
  using Unit = velocity::Value;
};

#define ENUMERATION_MAP_ENTRY( unitEnum )                               \
{ velocity::symbol< velocity::Unit::unitEnum >, velocity::Unit::unitEnum }

template<>
const std::unordered_map< std::string, velocity::Unit > 
enumerationMap< velocity::Unit > = { ENUMERATION_MAP_ENTRY(meterPerSecond),
                                     ENUMERATION_MAP_ENTRY(centimeterPerSecond),
                                     ENUMERATION_MAP_ENTRY(kilometerPerHour) };

#undef ENUMERATION_MAP_ENTRY

#define STRING_MAP_ENTRY( unitEnum )\
{ velocity::Unit::unitEnum, velocity::symbol< velocity::Unit::unitEnum > }

template<>
const std::unordered_map< velocity::Unit, std::string > 
stringMap< velocity::Unit > = { STRING_MAP_ENTRY(meterPerSecond),
                                STRING_MAP_ENTRY(centimeterPerSecond),
                                STRING_MAP_ENTRY(kilometerPerHour) };

#undef STRING_MAP_ENTRY

#define CONVERSION_MAP_ENTRY( unitEnum, constant ) \
{ velocity::symbol< velocity::Unit::unitEnum >, velocity::Value( 1 * velocity::constant ) }

template<>
const std::unordered_map< std::string, velocity::Value > 
conversionFactorMap< velocity::Unit > =
{ CONVERSION_MAP_ENTRY(meterPerSecond, m_per_s),
  CONVERSION_MAP_ENTRY(centimeterPerSecond, cm_per_s),
  CONVERSION_MAP_ENTRY(kilometerPerHour, km_per_hour) };

#undef CONVERSION_MAP_ENTRY

}

/* rude */
namespace boost {
namespace units {

inline std::string
name_string( const reduce_unit< ::unit::velocity::MeterPerSecond >::type& ) {
  return "meter per second";
}

inline std::string
symbol_string( const reduce_unit< ::unit::velocity::MeterPerSecond >::type& ) {
  return "m/s";
}

} 
} 

BOOST_UNITS_DEFINE_CONVERSION_FACTOR( \
  ::unit::velocity::base< ::unit::velocity::Unit::centimeterPerSecond >, \
  ::unit::velocity::MeterPerSecond, double, ::unit::scale::Centi::value() );
BOOST_UNITS_DEFAULT_CONVERSION( \
  ::unit::velocity::base< ::unit::velocity::Unit::centimeterPerSecond >, \
  ::unit::velocity::MeterPerSecond );

BOOST_UNITS_DEFINE_CONVERSION_FACTOR( \
  ::unit::velocity::base< ::unit::velocity::Unit::kilometerPerHour >, \
  ::unit::velocity::MeterPerSecond, double, \
  ::unit::scale::Kilo::value() / ::unit::scale::secondsPerMinute \
                                / ::unit::scale::minutesPerHour );
BOOST_UNITS_DEFAULT_CONVERSION( \
  ::unit::velocity::base< ::unit::velocity::Unit::kilometerPerHour >, \
  ::unit::velocity::MeterPerSecond );

#include "unit/src/functions.hpp"

#endif
