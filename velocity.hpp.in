#ifndef UNIT_VELOCITY_HPP
#define UNIT_VELOCITY_HPP

#include "boost/units/physical_dimensions/velocity.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace velocity {

enum class Unit {
  meterPerSecond,
  centimeterPerSecond = 1151,
  kilometerPerHour = 1152
};

template< Unit velocity >
const std::string name;

/** 
 * @brief 
 * A macro defining a constant string describing the name a argument unit 
 */
#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

DEFINE_NAME( meterPerSecond, meter per second )
DEFINE_NAME( centimeterPerSecond, centimeter per second )
DEFINE_NAME( kilometerPerHour, kilometer per hour )

#undef DEFINE_NAME

template< Unit velocity >
const std::string symbol;

/** 
 * @brief 
 * A macro defining a constant string describing the symbol a argument unit 
 */
#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

DEFINE_SYMBOL( meterPerSecond, m/s )
DEFINE_SYMBOL( centimeterPerSecond, cm/s )
DEFINE_SYMBOL( kilometerPerHour, km/hour )

#undef DEFINE_SYMBOL

template< Unit velocityUnit >
struct base : public boost::units::base_unit
< base< velocityUnit >,
  boost::units::velocity_dimension, static_cast< long >( velocityUnit ) > {

  static const std::string& name(){
    return unit::velocity::name< velocityUnit >;
  }

  static const std::string& symbol(){
    return unit::velocity::symbol< velocityUnit >;
  }
};

} // namespace velocity

/** @{
 *  @name Velocity unit types (used as Unit parameters in the Quantity template)
 */
using MeterPerSecond =
  boost::units::unit< boost::units::velocity_dimension, unit::System >;

using CentimeterPerSecond= velocity::base< velocity::Unit::centimeterPerSecond >::unit_type;
using KilometerPerHour = velocity::base< velocity::Unit::kilometerPerHour >::unit_type;
/** @}
 */

namespace velocity {

/** @{
 *  @name Velocity unit constants used in construction of velocity quantity
 */
BOOST_UNITS_STATIC_CONSTANT( m_per_s, unit::MeterPerSecond );
BOOST_UNITS_STATIC_CONSTANT( cm_per_s, unit::CentimeterPerSecond );
BOOST_UNITS_STATIC_CONSTANT( km_per_hour, unit::KilometerPerHour );
/** @}
 */

}

#define DEFINE_CONSTANT( name, Unit )\
const Quantity< Unit > name( 1.0 * velocity::name ); \
 \
template<> \
const Quantity< Unit > identity< Quantity< Unit > > = name; \

DEFINE_CONSTANT(m_per_s, MeterPerSecond)
DEFINE_CONSTANT(cm_per_s, CentimeterPerSecond)
DEFINE_CONSTANT(km_per_hour, KilometerPerHour)

#undef DEFINE_CONSTANT

template< typename QuantityType >
struct conversionFactor< velocity::Unit, QuantityType >{
  static const std::unordered_map< std::string, QuantityType > map;
};

template< typename QuantityType >
const std::unordered_map< std::string, QuantityType >
conversionFactor< velocity::Unit, QuantityType >::map =
{ { "m/s",  QuantityType( 1.0 * velocity::m_per_s ) },
  { "cm/s", QuantityType( 1.0 * velocity::cm_per_s ) },
  { "km/hour", QuantityType( 1.0 * velocity::km_per_hour ) } };

template<>
const std::string quantityName< velocity::Unit > = "velocity";

}

/* rude */
namespace boost {
namespace units {

inline std::string
name_string( const reduce_unit< ::unit::MeterPerSecond >::type& ) {
  return "meter per second";
}

inline std::string
symbol_string( const reduce_unit< ::unit::MeterPerSecond >::type& ) {
  return "m/s";
}

} 
} 

BOOST_UNITS_DEFINE_CONVERSION_FACTOR( \
  ::unit::velocity::base< ::unit::velocity::Unit::centimeterPerSecond >, \
  ::unit::MeterPerSecond, double, ::unit::scale::Centi::value() );
BOOST_UNITS_DEFAULT_CONVERSION( \
  ::unit::velocity::base< ::unit::velocity::Unit::centimeterPerSecond >, \
  ::unit::MeterPerSecond );

BOOST_UNITS_DEFINE_CONVERSION_FACTOR( \
  ::unit::velocity::base< ::unit::velocity::Unit::kilometerPerHour >, \
  ::unit::MeterPerSecond, double, \
  ::unit::scale::Kilo::value() / ::unit::scale::secondsPerMinute \
                                / ::unit::scale::minutesPerHour );
BOOST_UNITS_DEFAULT_CONVERSION( \
  ::unit::velocity::base< ::unit::velocity::Unit::kilometerPerHour >, \
  ::unit::MeterPerSecond );

#include "unit/src/functions.hpp"

#endif
