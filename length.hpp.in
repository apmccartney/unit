#ifndef UNIT_LENGTH_HPP
#define UNIT_LENGTH_HPP

#include <istream>

#include "boost/units/physical_dimensions/length.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace length {

enum class Unit {
  meter,
  centimeter,
  millimeter,
  micrometer,
  nanometer
};

template< Unit length >
const std::string name;

/** 
 * @brief 
 * A macro defining a constant string describing the name a argument unit 
 */
#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

DEFINE_NAME( meter, meter )
DEFINE_NAME( centimeter, centimeter )
DEFINE_NAME( millimeter, millimeter )
DEFINE_NAME( micrometer, micrometer )
DEFINE_NAME( nanometer, nanometer )

#undef DEFINE_NAME

template< Unit length >
const std::string symbol;

/** 
 * @brief 
 * A macro defining a constant string describing the symbol a argument unit 
 */
#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

DEFINE_SYMBOL( meter, m )
DEFINE_SYMBOL( centimeter, cm )
DEFINE_SYMBOL( millimeter, mm )
DEFINE_SYMBOL( micrometer, um )
DEFINE_SYMBOL( nanometer, nm )

#undef DEFINE_SYMBOL
 
} // namespace length

/** @{
 *  @name Length unit types (used as Unit parameters in the Quantity template)
 */
using Meter = boost::units::unit< boost::units::length_dimension, unit::System >;

/** @brief A macro creating a typedef corresponding to a scaled meter struct */
#define DEFINE_SCALED_METER( Prefix )    \
using Prefix## meter = boost::units::make_scaled_unit \
                       < unit::Meter, unit::scale::Prefix >::type;

DEFINE_SCALED_METER( Centi )
DEFINE_SCALED_METER( Milli )
DEFINE_SCALED_METER( Micro )
DEFINE_SCALED_METER( Nano )

#undef DEFINE_SCALED_METER
/** @}
 */

namespace length {

/** @{
 *  @name Length unit constants used in construction of length quantity
 */
BOOST_UNITS_STATIC_CONSTANT(m, unit::Meter);
BOOST_UNITS_STATIC_CONSTANT(cm, unit::Centimeter);
BOOST_UNITS_STATIC_CONSTANT(mm, unit::Millimeter);
BOOST_UNITS_STATIC_CONSTANT(um, unit::Micrometer);
BOOST_UNITS_STATIC_CONSTANT(nm, unit::Nanometer);
/** @}
 */

}

#define DEFINE_CONSTANT( name, Unit )\
const Quantity< Unit > name( 1.0 * length::name ); \
 \
template<>\
const Quantity< Unit > identity< Quantity< Unit > > = name;   \

DEFINE_CONSTANT(m, Meter)
DEFINE_CONSTANT(cm, Centimeter)
DEFINE_CONSTANT(mm, Millimeter)
DEFINE_CONSTANT(um, Micrometer)
DEFINE_CONSTANT(nm, Nanometer)

#undef DEFINE_CONSTANT

template< typename QuantityType >
struct conversionFactor< length::Unit, QuantityType >{
  static const std::unordered_map< std::string, QuantityType > map;
};

template< typename QuantityType >
const std::unordered_map< std::string, QuantityType >
conversionFactor< length::Unit, QuantityType >::map =
{ { "m", QuantityType( 1.0 * length::m ) },
  { "cm", QuantityType( 1.0 * length::cm ) },
  { "mm", QuantityType( 1.0 * length::mm ) },
  { "um", QuantityType( 1.0 * length::um ) },
  { "nm", QuantityType( 1.0 * length::nm ) } };

template<>
const std::string quantityName< length::Unit > = "length";

} // namespace unit

#include "unit/src/functions.hpp"

#endif
