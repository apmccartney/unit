#ifndef UNIT_LENGTH_HPP
#define UNIT_LENGTH_HPP

#include "boost/units/physical_dimensions/length.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace length {

enum class Unit {
  meter,
  centimeter,
  millimeter,
  micrometer,
  nanometer
};

template< Unit length >
const std::string name;

#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

DEFINE_NAME( meter, meter )
DEFINE_NAME( centimeter, centimeter )
DEFINE_NAME( millimeter, millimeter )
DEFINE_NAME( micrometer, micrometer )
DEFINE_NAME( nanometer, nanometer )

#undef DEFINE_NAME

template< Unit length >
const std::string symbol;

#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

DEFINE_SYMBOL( meter, m )
DEFINE_SYMBOL( centimeter, cm )
DEFINE_SYMBOL( millimeter, mm )
DEFINE_SYMBOL( micrometer, um )
DEFINE_SYMBOL( nanometer, nm )

#undef DEFINE_SYMBOL

using Meter = boost::units::unit< boost::units::length_dimension, unit::System >;

#define DEFINE_SCALED_METER( Prefix )    \
using Prefix## meter = boost::units::make_scaled_unit \
                       < unit::length::Meter, unit::scale::Prefix >::type;

DEFINE_SCALED_METER( Centi )
DEFINE_SCALED_METER( Milli )
DEFINE_SCALED_METER( Micro )
DEFINE_SCALED_METER( Nano )

#undef DEFINE_SCALED_METER

BOOST_UNITS_STATIC_CONSTANT(m, unit::length::Meter);
BOOST_UNITS_STATIC_CONSTANT(cm, unit::length::Centimeter);
BOOST_UNITS_STATIC_CONSTANT(mm, unit::length::Millimeter);
BOOST_UNITS_STATIC_CONSTANT(um, unit::length::Micrometer);
BOOST_UNITS_STATIC_CONSTANT(nm, unit::length::Nanometer);

using Value = unit::Quantity< unit::length::Centimeter >;

/** @brief Make a length::Value using a value and unit enumerator value */
Value
make( const double magnitude, const unit::length::Unit& unit );

/** @brief Make a length::Value given a magnitude and unit string value */
Value
make( const double magnitude, const std::string& unit );

/** @brief Convert a string to a length unit */
const auto toUnit = ::unit::toUnit< unit::length::Unit >;

}

/* template constant specialization */

#define ENUMERATION_MAP_ENTRY( unitEnum )\
{ length::symbol< length::Unit::unitEnum >, length::Unit::unitEnum }

template<>
const std::unordered_map< std::string, length::Unit > 
enumerationMap< length::Unit > = { ENUMERATION_MAP_ENTRY(meter),
                                   ENUMERATION_MAP_ENTRY(centimeter),
                                   ENUMERATION_MAP_ENTRY(millimeter),
                                   ENUMERATION_MAP_ENTRY(micrometer),
                                   ENUMERATION_MAP_ENTRY(nanometer) };

#undef ENUMERATION_MAP_ENTRY

#define STRING_MAP_ENTRY( unitEnum )\
{ length::Unit::unitEnum, length::symbol< length::Unit::unitEnum > }

template<>
const std::unordered_map< length::Unit, std::string > 
stringMap< length::Unit > = { STRING_MAP_ENTRY(meter),
                              STRING_MAP_ENTRY(centimeter),
                              STRING_MAP_ENTRY(millimeter),
                              STRING_MAP_ENTRY(micrometer),
                              STRING_MAP_ENTRY(nanometer) };

#undef STRING_MAP_ENTRY

}

#endif
