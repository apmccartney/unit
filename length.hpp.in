#ifndef UNIT_LENGTH_HPP
#define UNIT_LENGTH_HPP

#include <istream>

#include "boost/units/physical_dimensions/length.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace length {

enum class Unit {
  meter,
  centimeter,
  millimeter,
  micrometer,
  nanometer
};

template< Unit length >
const std::string name;

#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

DEFINE_NAME( meter, meter )
DEFINE_NAME( centimeter, centimeter )
DEFINE_NAME( millimeter, millimeter )
DEFINE_NAME( micrometer, micrometer )
DEFINE_NAME( nanometer, nanometer )

#undef DEFINE_NAME

template< Unit length >
const std::string symbol;

#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

DEFINE_SYMBOL( meter, m )
DEFINE_SYMBOL( centimeter, cm )
DEFINE_SYMBOL( millimeter, mm )
DEFINE_SYMBOL( micrometer, um )
DEFINE_SYMBOL( nanometer, nm )

#undef DEFINE_SYMBOL

/** @{
 *  @name Length unit types (used as Unit parameters in the Quantity template)
 */
using Meter = boost::units::unit< boost::units::length_dimension, unit::System >;

#define DEFINE_SCALED_METER( Prefix )    \
using Prefix## meter = boost::units::make_scaled_unit \
                       < unit::length::Meter, unit::scale::Prefix >::type;

DEFINE_SCALED_METER( Centi )
DEFINE_SCALED_METER( Milli )
DEFINE_SCALED_METER( Micro )
DEFINE_SCALED_METER( Nano )

#undef DEFINE_SCALED_METER
/** @}
 */

/** @{
 *  @name Length unit constants used in construction of length quantity
 */
BOOST_UNITS_STATIC_CONSTANT(m, unit::length::Meter);
BOOST_UNITS_STATIC_CONSTANT(cm, unit::length::Centimeter);
BOOST_UNITS_STATIC_CONSTANT(mm, unit::length::Millimeter);
BOOST_UNITS_STATIC_CONSTANT(um, unit::length::Micrometer);
BOOST_UNITS_STATIC_CONSTANT(nm, unit::length::Nanometer);
/** @}
 */

/** 
 * @brief An quantity value in a priviledged length unit: cm
 *
 * @details
 *  The length::Value constructor allows a user to create area values in cm using
 *  the cm unit as well as the other area units (e.g. m, mm, um, or nm).
 *  For example:
 *    unit::length::Value a1(1.0 * unit::length::cm);
 *    unit::length::Value a2(1.0 * unit::length::m);
 *
 *  To retrieve the value of the length in cm, the public method value()
 *  can be used. For the previous examples, value() will respectively
 *  return 1.0 for a1 and 100 for a2 (automatic conversion of 1 m to cm).
 *
 *  The following units are currently supported:
 *    - unit::length::m
 *    - unit::length::cm
 *    - unit::length::mm
 *    - unit::length::um
 *    - unit::length::nm
 */
using Value = unit::Quantity< unit::length::Centimeter >;

Value
read( std::istream& is );
 
}

/* template constant specialization */

template< >
struct InPreferred< length::Unit > {
  using Unit = length::Value;
};

#define DEFINE_ISTREAM_OP( quantity ) \
inline std::istream& \
operator>>( std::istream& is, unit::Quantity< length::quantity >& q ){ \
  q = unit::Quantity< length::quantity >( length::read( is ) );        \
  return is; \
} \

DEFINE_ISTREAM_OP( Meter )
DEFINE_ISTREAM_OP( Centimeter )
DEFINE_ISTREAM_OP( Millimeter )
DEFINE_ISTREAM_OP( Micrometer )
DEFINE_ISTREAM_OP( Nanometer )

#undef DEFINE_ISTREAM_OP

#define CONVERSION_MAP_ENTRY( unitEnum, constant ) \
{ length::symbol< length::Unit::unitEnum >, length::Value( 1 * length::constant ) }

template<>
const std::unordered_map< std::string, length::Value > 
conversionFactorMap< length::Unit > =
{ CONVERSION_MAP_ENTRY(meter, m),
  CONVERSION_MAP_ENTRY(centimeter, cm),
  CONVERSION_MAP_ENTRY(millimeter, mm),
  CONVERSION_MAP_ENTRY(micrometer, um),
  CONVERSION_MAP_ENTRY(nanometer, nm) };

#undef CONVERSION_MAP_ENTRY
}

#include "unit/src/functions.hpp"

#endif
