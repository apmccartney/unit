#ifndef UNIT_AREA_HPP
#define UNIT_AREA_HPP

#include "boost/units/conversion.hpp"
#include "boost/units/physical_dimensions/area.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace area {

enum class Unit {
  squareMeter,
  squareCentimeter = 1001,
  squareMillimeter = 1002,
  squareMicrometer = 1003,
  squareNanometer  = 1004,
  barn             = 1005
};

template< Unit area >
const std::string name;

#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

/** 
 * @brief 
 * A macro defining a constant string describing the name a argument unit 
 */
DEFINE_NAME( squareMeter, square meter )
DEFINE_NAME( squareCentimeter, square centimeter )
DEFINE_NAME( squareMillimeter, square millimeter )
DEFINE_NAME( squareMicrometer, square micrometer )
DEFINE_NAME( squareNanometer, square nanometer )
DEFINE_NAME( barn, barn )

#undef DEFINE_NAME

template< Unit area >
const std::string symbol;

#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

/** 
 * @brief 
 * A macro defining a constant string describing the symbol a argument unit 
 */
DEFINE_SYMBOL( squareMeter, m2 )
DEFINE_SYMBOL( squareCentimeter, cm2 )
DEFINE_SYMBOL( squareMillimeter, mm2 )
DEFINE_SYMBOL( squareMicrometer, um2 )
DEFINE_SYMBOL( squareNanometer, nm2 )
DEFINE_SYMBOL( barn, b )

#undef DEFINE_SYMBOL

template< Unit areaUnit >
struct base : public boost::units::base_unit
< base< areaUnit >,
  boost::units::area_dimension, static_cast< long >( areaUnit ) > {
  static const std::string& name(){ return unit::area::name< areaUnit >; }
  static const std::string& symbol(){ return unit::area::symbol< areaUnit >; }
};

} //namespace area

/** @{
 *  @name Area unit types (used as Unit parameters in the Quantity template)
 */
using SquareMeter =
  boost::units::unit< boost::units::area_dimension, unit::System >;

using SquareCentimeter = area::base< area::Unit::squareCentimeter >::unit_type;
using SquareMillimeter = area::base< area::Unit::squareMillimeter >::unit_type;
using SquareMicrometer = area::base< area::Unit::squareMicrometer >::unit_type;
using SquareNanometer  = area::base< area::Unit::squareNanometer >::unit_type;
using Barn             = area::base< area::Unit::barn >::unit_type;
/** @}
 */

namespace area {

/** @{
 *  @name Area unit constants used in construction of area quantity
 */
BOOST_UNITS_STATIC_CONSTANT( m2, unit::SquareMeter );
BOOST_UNITS_STATIC_CONSTANT( cm2, unit::SquareCentimeter );
BOOST_UNITS_STATIC_CONSTANT( mm2, unit::SquareMillimeter );
BOOST_UNITS_STATIC_CONSTANT( um2, unit::SquareMicrometer );
BOOST_UNITS_STATIC_CONSTANT( nm2, unit::SquareNanometer );
BOOST_UNITS_STATIC_CONSTANT( b, unit::Barn );
/** @}
 */

}

#define DEFINE_CONSTANT( name, Unit )\
const Quantity< Unit > name( 1.0 * area::name ); \
 \
template<> \
const Quantity< Unit > identity< Quantity< Unit > > = name;   \

DEFINE_CONSTANT(m2, SquareMeter)
DEFINE_CONSTANT(cm2, SquareCentimeter)
DEFINE_CONSTANT(mm2, SquareMillimeter)
DEFINE_CONSTANT(um2, SquareMicrometer)
DEFINE_CONSTANT(nm2, SquareNanometer)
DEFINE_CONSTANT(b, Barn)

#undef DEFINE_CONSTANT

template< typename QuantityType >
struct conversionFactor< area::Unit, QuantityType >{
  static const std::unordered_map< std::string, QuantityType > map;
};

template< typename QuantityType >
const std::unordered_map< std::string, QuantityType >
conversionFactor< area::Unit, QuantityType >::map =
{ { "m2",  QuantityType( 1.0 * area::m2 ) },
  { "cm2", QuantityType( 1.0 * area::cm2 ) },
  { "mm2", QuantityType( 1.0 * area::mm2 ) },
  { "um2", QuantityType( 1.0 * area::um2 ) },
  { "nm2", QuantityType( 1.0 * area::nm2 ) },
  { "b",   QuantityType( 1.0 * area::b ) } };

template<>
const std::string quantityName< area::Unit > = "area";

}

/* rude */
namespace boost {
namespace units {

inline std::string
name_string( const reduce_unit< ::unit::SquareMeter >::type& ) {
  return "square meter";
}

inline std::string
symbol_string( const reduce_unit< ::unit::SquareMeter >::type& ) {
  return "m2";
}

}
}

#define DEFINE_M2_CONVERSION( areaUnit, factor )\
  BOOST_UNITS_DEFINE_CONVERSION_FACTOR( \
    ::unit::area::base< ::unit::area::Unit::areaUnit >, \
    ::unit::SquareMeter, double, ::unit::scale::factor::value() ); \
  BOOST_UNITS_DEFAULT_CONVERSION( \
    ::unit::area::base< ::unit::area::Unit::areaUnit >, \
    ::unit::SquareMeter );

DEFINE_M2_CONVERSION( squareCentimeter, tenm4 )
DEFINE_M2_CONVERSION( squareMillimeter, Micro )
DEFINE_M2_CONVERSION( squareMicrometer, Pico )
DEFINE_M2_CONVERSION( squareNanometer, Atto )
DEFINE_M2_CONVERSION( barn, tenm28 )

#undef DEFINE_M2_CONVERSION

#include "unit/src/functions.hpp"

#endif
