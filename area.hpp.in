#ifndef UNIT_AREA_HPP
#define UNIT_AREA_HPP

#include "boost/units/conversion.hpp"
#include "boost/units/physical_dimensions/area.hpp"

#include "unit/scale.hpp"

namespace unit {
namespace area {

enum class Unit {
  squareMeter,
  squareCentimeter = 1001,
  squareMillimeter = 1002,
  squareMicrometer = 1003,
  squareNanometer  = 1004,
  barn             = 1005
};

template< Unit area >
const std::string name;

#define DEFINE_NAME( unit, unitName)\
template<> \
const std::string name< Unit::unit > = #unitName;

DEFINE_NAME( squareMeter, square meter )
DEFINE_NAME( squareCentimeter, square centimeter )
DEFINE_NAME( squareMillimeter, square millimeter )
DEFINE_NAME( squareMicrometer, square micrometer )
DEFINE_NAME( squareNanometer, square nanometer )
DEFINE_NAME( barn, barn )

#undef DEFINE_NAME

template< Unit area >
const std::string symbol;

#define DEFINE_SYMBOL( unit, unitSymbol )\
template<>\
const std::string symbol< Unit::unit > = #unitSymbol;

DEFINE_SYMBOL( squareMeter, m2 )
DEFINE_SYMBOL( squareCentimeter, cm2 )
DEFINE_SYMBOL( squareMillimeter, mm2 )
DEFINE_SYMBOL( squareMicrometer, um2 )
DEFINE_SYMBOL( squareNanometer, nm2 )
DEFINE_SYMBOL( barn, b )

#undef DEFINE_SYMBOL

template< Unit areaUnit >
struct base : public boost::units::base_unit
< base< areaUnit >,
  boost::units::area_dimension, static_cast< long >( areaUnit ) > {
  static const std::string& name(){ return unit::area::name< areaUnit >; }
  static const std::string& symbol(){ return unit::area::symbol< areaUnit >; }
};

using SquareMeter =
  boost::units::unit< boost::units::area_dimension, unit::System >;

using SquareCentimeter = base< Unit::squareCentimeter >::unit_type;
using SquareMillimeter = base< Unit::squareMillimeter >::unit_type;
using SquareMicrometer = base< Unit::squareMicrometer >::unit_type;
using SquareNanometer = base< Unit::squareNanometer >::unit_type;
using Barn = base< Unit::barn >::unit_type;

BOOST_UNITS_STATIC_CONSTANT( m2, unit::area::SquareMeter );
BOOST_UNITS_STATIC_CONSTANT( cm2, unit::area::SquareCentimeter );
BOOST_UNITS_STATIC_CONSTANT( mm2, unit::area::SquareMillimeter );
BOOST_UNITS_STATIC_CONSTANT( um2, unit::area::SquareMicrometer );
BOOST_UNITS_STATIC_CONSTANT( nm2, unit::area::SquareNanometer );
BOOST_UNITS_STATIC_CONSTANT( b, unit::area::Barn );

using Value = unit::Quantity< unit::area::SquareCentimeter >;

}

/* template constant specialization */

template< >
struct InPreferred< area::Unit > {
  using Unit = area::Value;
};

#define ENUMERATION_MAP_ENTRY( unitEnum )\
{ area::symbol< area::Unit::unitEnum >, area::Unit::unitEnum }

template<>
const std::unordered_map< std::string, area::Unit > 
enumerationMap< area::Unit > = { ENUMERATION_MAP_ENTRY(squareMeter),
                                 ENUMERATION_MAP_ENTRY(squareCentimeter),
                                 ENUMERATION_MAP_ENTRY(squareMillimeter),
                                 ENUMERATION_MAP_ENTRY(squareMicrometer),
                                 ENUMERATION_MAP_ENTRY(squareNanometer),
                                 ENUMERATION_MAP_ENTRY(barn)};

#undef ENUMERATION_MAP_ENTRY

#define STRING_MAP_ENTRY( unitEnum )\
{ area::Unit::unitEnum, area::symbol< area::Unit::unitEnum > }

template<>
const std::unordered_map< area::Unit, std::string > 
stringMap< area::Unit > = { STRING_MAP_ENTRY(squareMeter),
                            STRING_MAP_ENTRY(squareCentimeter),
                            STRING_MAP_ENTRY(squareMillimeter),
                            STRING_MAP_ENTRY(squareMicrometer),
                            STRING_MAP_ENTRY(squareNanometer),
                            STRING_MAP_ENTRY(barn) };

#undef STRING_MAP_ENTRY

#define CONVERSION_MAP_ENTRY( unitEnum, constant ) \
{ area::symbol< area::Unit::unitEnum >, area::Value( 1 * area::constant ) }

template<>
const std::unordered_map< std::string, area::Value > 
conversionFactorMap< area::Unit > =
{ CONVERSION_MAP_ENTRY(squareMeter, m2),
  CONVERSION_MAP_ENTRY(squareCentimeter, cm2),
  CONVERSION_MAP_ENTRY(squareMillimeter, mm2),
  CONVERSION_MAP_ENTRY(squareMicrometer, um2),
  CONVERSION_MAP_ENTRY(squareNanometer, nm2),
  CONVERSION_MAP_ENTRY(barn, b) };

#undef CONVERSION_MAP_ENTRY

}

/* rude */
namespace boost {
namespace units {

inline std::string
name_string( const reduce_unit< ::unit::area::SquareMeter >::type& ) {
  return "square meter";
}

inline std::string
symbol_string( const reduce_unit< ::unit::area::SquareMeter >::type& ) {
  return "m2";
}

}
}

#define DEFINE_M2_CONVERSION( areaUnit, factor )\
  BOOST_UNITS_DEFINE_CONVERSION_FACTOR( \
    ::unit::area::base< ::unit::area::Unit::areaUnit >, \
    ::unit::area::SquareMeter, double, ::unit::scale::factor::value() ); \
  BOOST_UNITS_DEFAULT_CONVERSION( \
    ::unit::area::base< ::unit::area::Unit::areaUnit >, \
    ::unit::area::SquareMeter );

DEFINE_M2_CONVERSION( squareCentimeter, tenm4 )
DEFINE_M2_CONVERSION( squareMillimeter, Micro )
DEFINE_M2_CONVERSION( squareMicrometer, Pico )
DEFINE_M2_CONVERSION( squareNanometer, Atto )
DEFINE_M2_CONVERSION( barn, tenm28 )

#undef DEFINE_M2_CONVERSION

#include "unit/src/functions.hpp"

#endif

