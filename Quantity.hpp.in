#ifndef UNIT_QUANTITY_HPP
#define UNIT_QUANTITY_HPP

#include "boost/units/io.hpp"
#include "boost/units/quantity.hpp"

#include "unit.hpp"

namespace unit {
    
/** 
 * @tparam Unit 
 * The physical unit corresponding to quantity
 *
 * @tparam MagnitudeType 
 * The underlying representation of the magnitude of the quantity.
 *                       
 * @details 
 * Quantities defined in different unit types are, by design, considered as
 * different types and cannot be implicitly converted into one another. As a 
 * result, a Quantity defined in a specific unit type can only be assigned to a
 * like typed Quantity. Attempting to directly assign between dissimilar types 
 * will result in an error at compile time. 
 * That said, automated unit conversion is desirable and the library does provide
 * the means to do so. To assign a Quantity using another unit type (of the 
 * same dimension), a static_cast to the left hand type may be applied to the 
 * right hand assignment argument. For example, the following statements will 
 * compile properly:
 *
 * @code
 *    Quantity< length::Centimeter > length1(1.0 * length::cm);
 *    Quantity< length::Meter > length2 = 
 *      static_cast< Quantity< length::Meter > >(length1);
 *    Quantity< length::Meter > length3 = 
 *      static_cast< Quantity< length::Meter > >( 1.0 * length::cm );
 *    Quantity< length::Meter > length4(1.0 * length::cm);
 * @endcode
 *
 * In this case, the first quantity will have a value of 1 cm while the other
 * three will have a value of 0.01 m.
 *
 * Quantity allows for addition or subtraction as long as the quantities
 * involved are given in the same unit type. For instance, a 
 * Quantity< length::Meter > cannot be added to a 
 * Quantity< length::CentiMeter > if no static_cast is applied.
 *
 * Quantity allows for multiplication and division. In this case, the
 * resulting quantity will have appropriate unit type associated to it. For
 * instance, a Quantity< length::Meter > divided by a Quantity<time::Second> has
 * the dimension of velocity and will be expressed in m s^-1. Division of 
 * quantities in unit types of the same dimension results in a dimensionless 
 * quantity (which can be implicitly converted to the underlying data type 
 * MagnitudeType).
 *
 * From an implementation point of view, unit::Quantity<U, T> is essentially
 * an alias to boost::units::quantity<U, T>. This is done for the purpose of
 * implementation hiding (should we wish to replace boost::units::quantity
 * by something similar using the same interface).
 */
template< typename Unit, typename MagnitudeType >
class Quantity : public boost::units::quantity< Unit, MagnitudeType > {

  using ParentType = boost::units::quantity< Unit, MagnitudeType >;

  template< typename U, typename T >
  using quantity = boost::units::quantity< T, U >;
    
public :
    
  /** @{
   *  @name Constructors
   */

  Quantity() = default;

  /** 
   * @brief Constructor using a Quantity or units::boost::quantity
   *
   *  The Quantity<U, T> constructor allows a user to create quantities in the
   *  given unit type U (e.g. Meter) using other unit types as long as these
   *  unit types are associated to the same dimension (e.g. Centimeter,
   *  Millimeter, etc.). For example, the following quantities are all equal
   *  to 1 meter:
   * @code
   *    Quantity< length::Meter > length1(1.0 * length::m);
   *    Quantity< length::Meter > length2(100.0 * length::cm);
   *    Quantity< length::Meter > length3(length2);
   * @endcode
   *
   *  @param[in] q   the quantity
   */
  template< typename CompatibleUnit, typename CompatibleType >
  Quantity( const quantity< CompatibleUnit, CompatibleType >& q ) :
    ParentType( q ) {}

  /** @}
   */

  /** @{
   *  @name Data retrieval functions
   */

  using ParentType::value;
    
  /** @brief Retrieve the value of the quantity in another unit
   *
   *  To retrieve the value of the Quantity in another unit type, this method
   *  can be used as follows:
   *
   * @code
   *    Quantity< length::Meter > length(1.0 * length::m);
   *    double value = length.value(cm); // value = 100.0
   * @endcode
   *
   *  @param[in] unit   the requested unit
   *
   *  @return The value of the quantity in the requested unit
   */
  template< typename CompatibleUnit >
  const MagnitudeType& value( const CompatibleUnit& ) const noexcept {
    return static_cast< quantity< CompatibleUnit, MagnitudeType > >
      (*this).value();
  }
  /** @}
   */
};

} 

#endif
